// xxbind0 internal header
// NOTE: no include guard

 #if _NARGS != 0
template<_CLASS_CARG0>
 #endif /* _NARGS != 0 */

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_CARG0_CARG1_REF _C_TAIL(_Nil&)>::_Type>::_Type
		operator()(_CARG0_C0_REF) const
	{	// apply bind object to arguments
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_CARG0_CARG1_REF _C_TAIL(_Nil&)>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(_C0_C1 _C_TAIL(_Nil_obj)));
	}

 #if _NARGS != 0
template<_CLASS_CARG0>
 #endif /* _NARGS != 0 */

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_CARG0_CARG1_REF _C_TAIL(_Nil&)>::_Type>::_Type
		operator()(_CARG0_C0_REF)
	{	// apply bind object to arguments
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_CARG0_CARG1_REF _C_TAIL(_Nil&)>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(_C0_C1 _C_TAIL(_Nil_obj)));
	}

/*
 * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V5.20:0009 */
