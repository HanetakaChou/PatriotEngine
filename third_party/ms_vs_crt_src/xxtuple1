// xxtuple1 internal header
// NOTE: no include guard

	// TEMPLATE FUNCTION make_tuple

 #if _NARGS == 0
inline _Make_tuple<>::_Type
	make_tuple()
	{	// create from no arguments
	return (_Make_tuple<>::_Type());
	}

 #else /* _NARGS == 0 */
template<_CLASS_ARG0> inline
	typename _Make_tuple<_ARG0_ARG1>::_Type
	make_tuple(_ARG0_A0)
	{	// create from one or more arguments
	return (typename _Make_tuple<_ARG0_ARG1>::_Type(_A0_A1));
	}
 #endif /* _NARGS == 0 */

	// TEMPLATE FUNCTION tie

 #if _NARGS == 0
inline _Make_tuple<>::_Type
	tie()
	{	// create from no arguments
	return (_Make_tuple<>::_Type());
	}

 #else /* _NARGS == 0 */
template<_CLASS_ARG0> inline
	typename _Make_tuple<_ARG0_ARG1_REF>::_Type
	tie(_ARG0_A0_REF)
	{	// create from one or more arguments
	return (typename _Make_tuple<_ARG0_ARG1_REF>::_Type(_A0_A1));
	}
 #endif /* _NARGS == 0 */

/*
 * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V5.20:0009 */
