//
// Copyright (C) YuqiaoZhang(HanetakaChou)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef _PT_GFX_SHADER_PREINT_HDR_GLSLANGH_
#define _PT_GFX_SHADER_PREINT_HDR_GLSLANGH_ 1

// TODO: term "HDR" is ambiguous
// HDR (Hemispherical Directional Reflectance)
// HDR (High Dynamic Range)

layout(set = 0, binding = 1) uniform sampler2D g_LUT_PreIntegratedHDR_TR;

highp vec3 PreIntegratedHDR_TR(highp vec3 f0, highp float f90, highp float roughness, highp float NdotV)
{
    // UE: [EnvBRDF](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BRDF.ush#L471)
    // U3D: [GetPreIntegratedFGDGGXAndDisneyDiffuse](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Material/PreIntegratedFGD/PreIntegratedFGD.hlsl#L8)

    // Remap: [0, 1] -> [0.5/size, 1.0 - 0.5/size]
    // U3D: [Remap01ToHalfTexelCoord](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl#L661)
    // UE: [N/A](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/RectLight.ush#L450)
    highp ivec2 lut_texture_size = textureSize(g_LUT_PreIntegratedHDR_TR, 0);
    highp vec2 lut_bias = vec2(0.5, 0.5) / vec2(lut_texture_size.x, lut_texture_size.y);
    highp vec2 lut_scale = vec2(1.0, 1.0) - vec2(1.0, 1.0) / vec2(lut_texture_size.x, lut_texture_size.y);
    highp vec2 lut_uv = lut_bias + lut_scale * vec2(NdotV, roughness);

    highp vec2 n_RG = texture(g_LUT_PreIntegratedHDR_TR, lut_uv).rg;
    highp float n_R = n_RG.r;
    highp float n_G = n_RG.g;

    highp vec3 hdr = f0 * n_R + vec3(f90, f90, f90) * n_G;
    return hdr;
}

highp vec3 PreIntegratedHDR_TR(highp vec3 f0, highp float roughness, highp float NdotV)
{
    // UE: [EnvBRDF](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BRDF.ush#L476)
    // Anything less than 2% is physically impossible and is instead considered to be shadowing
    highp float f90 = clamp(50.0 * f0.g, 0.0, 1.0);

    return PreIntegratedHDR_TR(f0, f90, roughness, NdotV);
}

#endif