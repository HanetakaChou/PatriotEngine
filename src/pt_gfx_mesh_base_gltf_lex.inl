#line 2 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.inl"

#line 4 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.inl"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define gltf_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer gltf_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define gltf_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer gltf_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define gltf_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer gltf_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define gltf_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string gltf_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define gltf_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes gltf_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define gltf_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer gltf_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define gltf_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer gltf_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define gltf_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state gltf_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define gltf_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer gltf_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define gltf_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state gltf_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define gltf_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state gltf_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define gltf_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack gltf_yyensure_buffer_stack
#endif

#ifdef yylex
#define gltf_yylex_ALREADY_DEFINED
#else
#define yylex gltf_yylex
#endif

#ifdef yyrestart
#define gltf_yyrestart_ALREADY_DEFINED
#else
#define yyrestart gltf_yyrestart
#endif

#ifdef yylex_init
#define gltf_yylex_init_ALREADY_DEFINED
#else
#define yylex_init gltf_yylex_init
#endif

#ifdef yylex_init_extra
#define gltf_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra gltf_yylex_init_extra
#endif

#ifdef yylex_destroy
#define gltf_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy gltf_yylex_destroy
#endif

#ifdef yyget_debug
#define gltf_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug gltf_yyget_debug
#endif

#ifdef yyset_debug
#define gltf_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug gltf_yyset_debug
#endif

#ifdef yyget_extra
#define gltf_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra gltf_yyget_extra
#endif

#ifdef yyset_extra
#define gltf_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra gltf_yyset_extra
#endif

#ifdef yyget_in
#define gltf_yyget_in_ALREADY_DEFINED
#else
#define yyget_in gltf_yyget_in
#endif

#ifdef yyset_in
#define gltf_yyset_in_ALREADY_DEFINED
#else
#define yyset_in gltf_yyset_in
#endif

#ifdef yyget_out
#define gltf_yyget_out_ALREADY_DEFINED
#else
#define yyget_out gltf_yyget_out
#endif

#ifdef yyset_out
#define gltf_yyset_out_ALREADY_DEFINED
#else
#define yyset_out gltf_yyset_out
#endif

#ifdef yyget_leng
#define gltf_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng gltf_yyget_leng
#endif

#ifdef yyget_text
#define gltf_yyget_text_ALREADY_DEFINED
#else
#define yyget_text gltf_yyget_text
#endif

#ifdef yyget_lineno
#define gltf_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno gltf_yyget_lineno
#endif

#ifdef yyset_lineno
#define gltf_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno gltf_yyset_lineno
#endif

#ifdef yyget_column
#define gltf_yyget_column_ALREADY_DEFINED
#else
#define yyget_column gltf_yyget_column
#endif

#ifdef yyset_column
#define gltf_yyset_column_ALREADY_DEFINED
#else
#define yyset_column gltf_yyset_column
#endif

#ifdef yywrap
#define gltf_yywrap_ALREADY_DEFINED
#else
#define yywrap gltf_yywrap
#endif

#ifdef yyalloc
#define gltf_yyalloc_ALREADY_DEFINED
#else
#define yyalloc gltf_yyalloc
#endif

#ifdef yyrealloc
#define gltf_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc gltf_yyrealloc
#endif

#ifdef yyfree
#define gltf_yyfree_ALREADY_DEFINED
#else
#define yyfree gltf_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef const struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 13
#define YY_END_OF_BUFFER 14
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static const struct yy_trans_info yy_transition[1271] =
    {
 {   0,   0 }, {   0,1143 }, {   0,   0 }, {   0,1141 }, {   1, 260 },
 {   2, 260 }, {   3, 260 }, {   4, 260 }, {   5, 260 }, {   6, 260 },
 {   7, 260 }, {   8, 260 }, {   9, 262 }, {  10, 264 }, {  11, 260 },
 {  12, 260 }, {  13, 262 }, {  14, 260 }, {  15, 260 }, {  16, 260 },
 {  17, 260 }, {  18, 260 }, {  19, 260 }, {  20, 260 }, {  21, 260 },
 {  22, 260 }, {  23, 260 }, {  24, 260 }, {  25, 260 }, {  26, 260 },
 {  27, 260 }, {  28, 260 }, {  29, 260 }, {  30, 260 }, {  31, 260 },
 {  32, 262 }, {  33, 260 }, {  34, 284 }, {  35, 260 }, {  36, 260 },
 {  37, 260 }, {  38, 260 }, {  39, 260 }, {  40, 260 }, {  41, 260 },
 {  42, 260 }, {  43, 260 }, {  44, 266 }, {  45, 414 }, {  46, 260 },

 {  47, 260 }, {  48, 426 }, {  49, 426 }, {  50, 426 }, {  51, 426 },
 {  52, 426 }, {  53, 426 }, {  54, 426 }, {  55, 426 }, {  56, 426 },
 {  57, 426 }, {  58, 268 }, {  59, 260 }, {  60, 260 }, {  61, 260 },
 {  62, 260 }, {  63, 260 }, {  64, 260 }, {  65, 260 }, {  66, 260 },
 {  67, 260 }, {  68, 260 }, {  69, 260 }, {  70, 260 }, {  71, 260 },
 {  72, 260 }, {  73, 260 }, {  74, 260 }, {  75, 260 }, {  76, 260 },
 {  77, 260 }, {  78, 260 }, {  79, 260 }, {  80, 260 }, {  81, 260 },
 {  82, 260 }, {  83, 260 }, {  84, 260 }, {  85, 260 }, {  86, 260 },
 {  87, 260 }, {  88, 260 }, {  89, 260 }, {  90, 260 }, {  91, 270 },
 {  92, 260 }, {  93, 273 }, {  94, 260 }, {  95, 260 }, {  96, 260 },

 {  97, 260 }, {  98, 260 }, {  99, 260 }, { 100, 260 }, { 101, 260 },
 { 102, 260 }, { 103, 260 }, { 104, 260 }, { 105, 260 }, { 106, 260 },
 { 107, 260 }, { 108, 260 }, { 109, 260 }, { 110, 260 }, { 111, 260 },
 { 112, 260 }, { 113, 260 }, { 114, 260 }, { 115, 260 }, { 116, 260 },
 { 117, 260 }, { 118, 260 }, { 119, 260 }, { 120, 260 }, { 121, 260 },
 { 122, 260 }, { 123, 277 }, { 124, 260 }, { 125, 279 }, { 126, 260 },
 { 127, 260 }, { 128, 260 }, {   0,   0 }, {   0,1011 }, {   1, 130 },
 {   2, 130 }, {   3, 130 }, {   4, 130 }, {   5, 130 }, {   6, 130 },
 {   7, 130 }, {   8, 130 }, {   9, 132 }, {  10, 134 }, {  11, 130 },
 {  12, 130 }, {  13, 132 }, {  14, 130 }, {  15, 130 }, {  16, 130 },

 {  17, 130 }, {  18, 130 }, {  19, 130 }, {  20, 130 }, {  21, 130 },
 {  22, 130 }, {  23, 130 }, {  24, 130 }, {  25, 130 }, {  26, 130 },
 {  27, 130 }, {  28, 130 }, {  29, 130 }, {  30, 130 }, {  31, 130 },
 {  32, 132 }, {  33, 130 }, {  34, 154 }, {  35, 130 }, {  36, 130 },
 {  37, 130 }, {  38, 130 }, {  39, 130 }, {  40, 130 }, {  41, 130 },
 {  42, 130 }, {  43, 130 }, {  44, 136 }, {  45, 284 }, {  46, 130 },
 {  47, 130 }, {  48, 296 }, {  49, 296 }, {  50, 296 }, {  51, 296 },
 {  52, 296 }, {  53, 296 }, {  54, 296 }, {  55, 296 }, {  56, 296 },
 {  57, 296 }, {  58, 138 }, {  59, 130 }, {  60, 130 }, {  61, 130 },
 {  62, 130 }, {  63, 130 }, {  64, 130 }, {  65, 130 }, {  66, 130 },

 {  67, 130 }, {  68, 130 }, {  69, 130 }, {  70, 130 }, {  71, 130 },
 {  72, 130 }, {  73, 130 }, {  74, 130 }, {  75, 130 }, {  76, 130 },
 {  77, 130 }, {  78, 130 }, {  79, 130 }, {  80, 130 }, {  81, 130 },
 {  82, 130 }, {  83, 130 }, {  84, 130 }, {  85, 130 }, {  86, 130 },
 {  87, 130 }, {  88, 130 }, {  89, 130 }, {  90, 130 }, {  91, 140 },
 {  92, 130 }, {  93, 143 }, {  94, 130 }, {  95, 130 }, {  96, 130 },
 {  97, 130 }, {  98, 130 }, {  99, 130 }, { 100, 130 }, { 101, 130 },
 { 102, 130 }, { 103, 130 }, { 104, 130 }, { 105, 130 }, { 106, 130 },
 { 107, 130 }, { 108, 130 }, { 109, 130 }, { 110, 130 }, { 111, 130 },
 { 112, 130 }, { 113, 130 }, { 114, 130 }, { 115, 130 }, { 116, 130 },

 { 117, 130 }, { 118, 130 }, { 119, 130 }, { 120, 130 }, { 121, 130 },
 { 122, 130 }, { 123, 147 }, { 124, 130 }, { 125, 149 }, { 126, 130 },
 { 127, 130 }, { 128, 130 }, {   0,  12 }, {   0, 881 }, {   0,   2 },
 {   0, 879 }, {   0,   1 }, {   0, 877 }, {   0,   8 }, {   0, 875 },
 {   0,   5 }, {   0, 873 }, {   0,   6 }, {   0, 871 }, {   9, 156 },
 {   0,   7 }, {   0, 868 }, {   0,   0 }, {  13, 156 }, {   0,   3 },
 {   0, 864 }, {   0,   4 }, {   0, 862 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  12 }, {   0, 857 }, {   1, 233 }, {   2, 233 },
 {   3, 233 }, {   4, 233 }, {   5, 233 }, {   6, 233 }, {   7, 233 },
 {   8, 233 }, {   9, 233 }, {  32, 156 }, {  11, 233 }, {  12, 233 },

 {  13, 233 }, {  14, 233 }, {  15, 233 }, {  16, 233 }, {  17, 233 },
 {  18, 233 }, {  19, 233 }, {  20, 233 }, {  21, 233 }, {  22, 233 },
 {  23, 233 }, {  24, 233 }, {  25, 233 }, {  26, 233 }, {  27, 233 },
 {  28, 233 }, {  29, 233 }, {  30, 233 }, {  31, 233 }, {  32, 233 },
 {  33, 233 }, {  34, 136 }, {  35, 233 }, {  36, 233 }, {  37, 233 },
 {  38, 233 }, {  39, 233 }, {  40, 233 }, {  41, 233 }, {  42, 233 },
 {  43, 233 }, {  44, 233 }, {  45, 233 }, {  46, 233 }, {  47, 233 },
 {  48, 233 }, {  49, 233 }, {  50, 233 }, {  51, 233 }, {  52, 233 },
 {  53, 233 }, {  54, 233 }, {  55, 233 }, {  56, 233 }, {  57, 233 },
 {  58, 233 }, {  59, 233 }, {  60, 233 }, {  61, 233 }, {  62, 233 },

 {  63, 233 }, {  64, 233 }, {  65, 233 }, {  66, 233 }, {  67, 233 },
 {  68, 233 }, {  69, 233 }, {  70, 233 }, {  71, 233 }, {  72, 233 },
 {  73, 233 }, {  74, 233 }, {  75, 233 }, {  76, 233 }, {  77, 233 },
 {  78, 233 }, {  79, 233 }, {  80, 233 }, {  81, 233 }, {  82, 233 },
 {  83, 233 }, {  84, 233 }, {  85, 233 }, {  86, 233 }, {  87, 233 },
 {  88, 233 }, {  89, 233 }, {  90, 233 }, {  91, 233 }, {  92, 363 },
 {  93, 233 }, {  94, 233 }, {  95, 233 }, {  96, 233 }, {  97, 233 },
 {  98, 233 }, {  99, 233 }, { 100, 233 }, { 101, 233 }, { 102, 233 },
 { 103, 233 }, { 104, 233 }, { 105, 233 }, { 106, 233 }, { 107, 233 },
 { 108, 233 }, { 109, 233 }, { 110, 233 }, { 111, 233 }, { 112, 233 },

 { 113, 233 }, { 114, 233 }, { 115, 233 }, { 116, 233 }, { 117, 233 },
 { 118, 233 }, { 119, 233 }, { 120, 233 }, { 121, 233 }, { 122, 233 },
 { 123, 233 }, { 124, 233 }, { 125, 233 }, { 126, 233 }, { 127, 233 },
 { 128, 233 }, {   0,  12 }, {   0, 727 }, {   0,   0 }, {   0,   0 },
 {   0,   2 }, {   0, 723 }, {   0,  11 }, {   0, 721 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   9 }, {   0, 715 },
 {   9,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  13,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48, 363 }, {  49, 363 }, {  50, 363 }, {  51, 363 }, {  52, 363 },
 {  53, 363 }, {  54, 363 }, {  55, 363 }, {  56, 363 }, {  57, 363 },
 {  46, 361 }, {   0,   0 }, {  48, 373 }, {  49, 373 }, {  50, 373 },
 {  51, 373 }, {  52, 373 }, {  53, 373 }, {  54, 373 }, {  55, 373 },
 {  56, 373 }, {  57, 373 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69, 432 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0, 624 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 { 101, 432 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },

 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34, -97 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },

 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92, 130 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   0 },

 {   0, 494 }, {   1,-130 }, {   2,-130 }, {   3,-130 }, {   4,-130 },
 {   5,-130 }, {   6,-130 }, {   7,-130 }, {   8,-130 }, {   9,-130 },
 {   0,   0 }, {  11,-130 }, {  12,-130 }, {  13,-130 }, {  14,-130 },
 {  15,-130 }, {  16,-130 }, {  17,-130 }, {  18,-130 }, {  19,-130 },
 {  20,-130 }, {  21,-130 }, {  22,-130 }, {  23,-130 }, {  24,-130 },
 {  25,-130 }, {  26,-130 }, {  27,-130 }, {  28,-130 }, {  29,-130 },
 {  30,-130 }, {  31,-130 }, {  32,-130 }, {  33,-130 }, {  34,-130 },
 {  35,-130 }, {  36,-130 }, {  37,-130 }, {  38,-130 }, {  39,-130 },
 {  40,-130 }, {  41,-130 }, {  42,-130 }, {  43,-130 }, {  44,-130 },
 {  45,-130 }, {  46,-130 }, {  47,-130 }, {  48,-130 }, {  49,-130 },

 {  50,-130 }, {  51,-130 }, {  52,-130 }, {  53,-130 }, {  54,-130 },
 {  55,-130 }, {  56,-130 }, {  57,-130 }, {  58,-130 }, {  59,-130 },
 {  60,-130 }, {  61,-130 }, {  62,-130 }, {  63,-130 }, {  64,-130 },
 {  65,-130 }, {  66,-130 }, {  67,-130 }, {  68,-130 }, {  69,-130 },
 {  70,-130 }, {  71,-130 }, {  72,-130 }, {  73,-130 }, {  74,-130 },
 {  75,-130 }, {  76,-130 }, {  77,-130 }, {  78,-130 }, {  79,-130 },
 {  80,-130 }, {  81,-130 }, {  82,-130 }, {  83,-130 }, {  84,-130 },
 {  85,-130 }, {  86,-130 }, {  87,-130 }, {  88,-130 }, {  89,-130 },
 {  90,-130 }, {  91,-130 }, {  92,-130 }, {  93,-130 }, {  94,-130 },
 {  95,-130 }, {  96,-130 }, {  97,-130 }, {  98,-130 }, {  99,-130 },

 { 100,-130 }, { 101,-130 }, { 102,-130 }, { 103,-130 }, { 104,-130 },
 { 105,-130 }, { 106,-130 }, { 107,-130 }, { 108,-130 }, { 109,-130 },
 { 110,-130 }, { 111,-130 }, { 112,-130 }, { 113,-130 }, { 114,-130 },
 { 115,-130 }, { 116,-130 }, { 117,-130 }, { 118,-130 }, { 119,-130 },
 { 120,-130 }, { 121,-130 }, { 122,-130 }, { 123,-130 }, { 124,-130 },
 { 125,-130 }, { 126,-130 }, { 127,-130 }, { 128,-130 }, {   0,   9 },
 {   0, 364 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0, 354 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   9 }, {   0, 342 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  46,  10 }, {   0,   0 }, {  48,  22 }, {  49,  22 },
 {  50,  22 }, {  51,  22 }, {  52,  22 }, {  53,  22 }, {  54,  22 },
 {  55,  22 }, {  56,  22 }, {  57,  22 }, {  48,  83 }, {  49,  83 },
 {  50,  83 }, {  51,  83 }, {  52,  83 }, {  53,  83 }, {  54,  83 },
 {  55,  83 }, {  56,  83 }, {  57,  83 }, {  46, -12 }, {  69,  81 },

 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {   0, 283 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  69,  59 }, {   0,  10 }, {   0, 271 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 101,  81 }, {   0,   0 }, {   0, 261 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  10 },
 {   0, 249 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  59 }, {  43,  22 },
 {   0,   0 }, {  45,  22 }, {   0,  10 }, {   0, 236 }, {  48,  34 },
 {  49,  34 }, {  50,  34 }, {  51,  34 }, {  52,  34 }, {  53,  34 },
 {  54,  34 }, {  55,  34 }, {  56,  34 }, {  57,  34 }, {   0,   0 },
 {   0,   0 }, {  48,  35 }, {  49,  35 }, {  50,  35 }, {  51,  35 },
 {  52,  35 }, {  53,  35 }, {  54,  35 }, {  55,  35 }, {  56,  35 },
 {  57,  35 }, {  48,  12 }, {  49,  12 }, {  50,  12 }, {  51,  12 },
 {  52,  12 }, {  53,  12 }, {  54,  12 }, {  55,  12 }, {  56,  12 },
 {  57,  12 }, {   0,   0 }, {  69,  94 }, {  48,  84 }, {  49,  84 },
 {  50,  84 }, {  51,  84 }, {  52,  84 }, {  53,  84 }, {  54,  84 },

 {  55,  84 }, {  56,  84 }, {  57,  84 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0, 177 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  94 },
 {   0,   0 }, {   0,   0 }, {  69,  59 }, {   0,  10 }, {   0, 165 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 155 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  10 }, {   0, 145 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  59 },
 {  43,  22 }, {   0,   0 }, {  45,  22 }, {   0,  10 }, {   0, 130 },
 {  48,  32 }, {  49,  32 }, {  50,  32 }, {  51,  32 }, {  52,  32 },
 {  53,  32 }, {  54,  32 }, {  55,  32 }, {  56,  32 }, {  57,  32 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  48,  10 }, {  49,  10 }, {  50,  10 },
 {  51,  10 }, {  52,  10 }, {  53,  10 }, {  54,  10 }, {  55,  10 },
 {  56,  10 }, {  57,  10 }, {  48,  15 }, {  49,  15 }, {  50,  15 },

 {  51,  15 }, {  52,  15 }, {  53,  15 }, {  54,  15 }, {  55,  15 },
 {  56,  15 }, {  57,  15 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 129,  14 }, {   1,   0 },
    };

static const struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[14] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
#line 15 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
    /* https://westes.github.io/flex/manual/Start-Conditions.html#Start-Conditions */
    /* https://westes.github.io/flex/manual/Patterns.html#Patterns */
    /* https://www.crockford.com/mckeeman.html */
    /* Ignore whitespace */
    /* keywords */
    /* string literal */
    /* Split */
#line 861 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.inl"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 46 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"

    /* bugs for yylineno */
    /* ("\r\n") compatible WS \r */
#line 1107 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.inl"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		const struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 49 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    (yycolumn) = 0;
}
	YY_BREAK
/* ignore whitespace */
case 2:
YY_RULE_SETUP
#line 54 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{ 
    
}
	YY_BREAK
/* split */
case 3:
YY_RULE_SETUP
#line 59 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    return YYTOKEN_LEFTBRACE;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 63 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    return YYTOKEN_RIGHTBRACE;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    return YYTOKEN_COLON;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 71 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    return YYTOKEN_LEFTBRACKET;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    return YYTOKEN_RIGHTBRACKET;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    return YYTOKEN_COMMA;
    }
	YY_BREAK
/* literal values */
case 9:
YY_RULE_SETUP
#line 84 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    char *endptr = NULL;
    long numberlong = strtol((yytext), &endptr, 10);
    assert(endptr <= ((yytext) + (yyleng)));
    lvalp->m_token_numberint = numberlong;
    return YYTOKEN_NUMBER_INT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 92 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{ 
    char *endptr = NULL;
    lvalp->m_token_numberfloat = strtof((yytext), &endptr);
    assert(endptr <= ((yytext) + (yyleng)));
    return YYTOKEN_NUMBER_FLOAT; 
}
	YY_BREAK
/* string literal */
case 11:
YY_RULE_SETUP
#line 100 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
    /* keywords */
    static char const ASSET[] = "\"asset\"";
    static int const ASSET_LENG = sizeof(ASSET) / sizeof(ASSET[0]) - 1;
    static char const COPYRIGHT[] = "\"copyright\"";
    static int const COPYRIGHT_LENG = sizeof(COPYRIGHT) / sizeof(COPYRIGHT[0]) - 1;
    static char const GENERATOR[] = "\"generator\"";
    static int const GENERATOR_LENG = sizeof(GENERATOR) / sizeof(GENERATOR[0]) - 1;
    static char const VERSION[] = "\"version\"";
    static int const VERSION_LENG = sizeof(VERSION) / sizeof(VERSION[0]) - 1;
    static char const MINVERSION[] = "\"minversion\"";
    static int const MINVERSION_LENG = sizeof(MINVERSION) / sizeof(MINVERSION[0]) - 1;
    static char const SCENE[] = "\"scene\"";
    static int const SCENE_LENG = sizeof(SCENE) / sizeof(SCENE[0]) - 1;
    static char const SCENES[] = "\"scenes\"";
    static int const SCENES_LENG = sizeof(SCENES) / sizeof(SCENES[0]) - 1;
    static char const NODES[] = "\"nodes\"";
    static int const NODES_LENG = sizeof(NODES) / sizeof(NODES[0]) - 1;
    static char const NAME[] = "\"name\"";
    static int const NAME_LENG = sizeof(NAME) / sizeof(NAME[0]) - 1;
    static char const CAMERA[] = "\"camera\"";
    static int const CAMERA_LENG = sizeof(CAMERA) / sizeof(CAMERA[0]) - 1;
    static char const CHILDREN[] = "\"children\"";
    static int const CHILDREN_LENG = sizeof(CHILDREN) / sizeof(CHILDREN[0]) - 1;
    static char const SKIN[] = "\"skin\"";
    static int const SKIN_LENG = sizeof(SKIN) / sizeof(SKIN[0]) - 1;
    static char const MATRIX[] = "\"matrix\"";
    static int const MATRIX_LENG = sizeof(MATRIX) / sizeof(MATRIX[0]) - 1;
    static char const MESH[] = "\"mesh\"";
    static int const MESH_LENG = sizeof(MESH) / sizeof(MESH[0]) - 1;
    static char const ROTATION[] = "\"rotation\"";
    static int const ROTATION_LENG = sizeof(ROTATION) / sizeof(ROTATION[0]) - 1;
    static char const SCALE[] = "\"scale\"";
    static int const SCALE_LENG = sizeof(SCALE) / sizeof(SCALE[0]) - 1;
    static char const TRANSLATION[] = "\"translation\"";
    static int const TRANSLATION_LENG = sizeof(TRANSLATION) / sizeof(TRANSLATION[0]) - 1;
    static char const WEIGHTS[] = "\"weights\"";
    static int const WEIGHTS_LENG = sizeof(WEIGHTS) / sizeof(WEIGHTS[0]) - 1;
    static char const BUFFERS[] = "\"buffers\"";
    static int const BUFFERS_LENG = sizeof(BUFFERS) / sizeof(BUFFERS[0]) - 1;
    static char const BYTELENGTH[] = "\"byteLength\"";
    static int const BYTELENGTH_LENG = sizeof(BYTELENGTH) / sizeof(BYTELENGTH[0]) - 1;
    static char const URI[] = "\"uri\"";
    static int const URI_LENG = sizeof(URI) / sizeof(URI[0]) - 1;
    static char const BUFFERVIEWS[] = "\"bufferViews\"";
    static int const BUFFERVIEWS_LENG = sizeof(BUFFERVIEWS) / sizeof(BUFFERVIEWS[0]) - 1;
    static char const BUFFER[] = "\"buffer\"";
    static int const BUFFER_LENG = sizeof(BUFFER) / sizeof(BUFFER[0]) - 1;
    static char const BYTEOFFSET[] = "\"byteOffset\"";
    static int const BYTEOFFSET_LENG = sizeof(BYTEOFFSET) / sizeof(BYTEOFFSET[0]) - 1;
    static char const BYTESTRIDE[] = "\"byteStride\"";
    static int const BYTESTRIDE_LENG = sizeof(BYTESTRIDE) / sizeof(BYTESTRIDE[0]) - 1;
    static char const TARGET[] = "\"target\"";
    static int const TARGET_LENG = sizeof(TARGET) / sizeof(TARGET[0]) - 1;
    static char const ACCESSORS[] = "\"accessors\"";
    static int const ACCESSORS_LENG = sizeof(ACCESSORS) / sizeof(ACCESSORS[0]) - 1;
    static char const BUFFERVIEW[] = "\"bufferView\"";
    static int const BUFFERVIEW_LENG = sizeof(BUFFERVIEW) / sizeof(BUFFERVIEW[0]) - 1;
    static char const COMPONENTTYPE[] = "\"componentType\"";
    static int const COMPONENTTYPE_LENG = sizeof(COMPONENTTYPE) / sizeof(COMPONENTTYPE[0]) - 1;
    static char const NORMALIZED[] = "\"normalized\"";
    static int const NORMALIZED_LENG = sizeof(NORMALIZED) / sizeof(NORMALIZED[0]) - 1;
    static char const COUNT[] = "\"count\"";
    static int const COUNT_LENG = sizeof(COUNT) / sizeof(COUNT[0]) - 1;
    static char const TYPE[] = "\"type\"";
    static int const TYPE_LENG = sizeof(TYPE) / sizeof(TYPE[0]) - 1;
    static char const SCALAR[] = "\"SCALAR\"";
    static int const SCALAR_LENG = sizeof(SCALAR) / sizeof(SCALAR[0]) - 1;
    static char const VEC2[] = "\"VEC2\"";
    static int const VEC2_LENG = sizeof(VEC2) / sizeof(VEC2[0]) - 1;
    static char const VEC3[] = "\"VEC3\"";
    static int const VEC3_LENG = sizeof(VEC3) / sizeof(VEC3[0]) - 1;
    static char const VEC4[] = "\"VEC4\"";
    static int const VEC4_LENG = sizeof(VEC4) / sizeof(VEC4[0]) - 1;
    static char const MAT2[] = "\"MAT2\"";
    static int const MAT2_LENG = sizeof(MAT2) / sizeof(MAT2[0]) - 1;
    static char const MAT3[] = "\"MAT3\"";
    static int const MAT3_LENG = sizeof(MAT3) / sizeof(MAT3[0]) - 1;
    static char const MAT4[] = "\"MAT4\"";
    static int const MAT4_LENG = sizeof(MAT4) / sizeof(MAT4[0]) - 1;
    static char const MAX[] = "\"max\"";
    static int const MAX_LENG = sizeof(MAX) / sizeof(MAX[0]) - 1;
    static char const MIN[] = "\"min\"";
    static int const MIN_LENG = sizeof(MIN) / sizeof(MIN[0]) - 1;
    static char const SPARSE[] = "\"sparse\"";
    static int const SPARSE_LENG = sizeof(SPARSE) / sizeof(SPARSE[0]) - 1;
    static char const TRUE[] = "\"true\"";
    static int const TRUE_LENG = sizeof(TRUE) / sizeof(TRUE[0]) - 1;
    static char const FALSE[] = "\"false\"";
    static int const FALSE_LENG = sizeof(FALSE) / sizeof(FALSE[0]) - 1;
    static char const TOKEN_NULL[] = "\"null\"";
    static int const TOKEN_NULL_LENG = sizeof(TOKEN_NULL) / sizeof(TOKEN_NULL[0]) - 1;

    if (0 == gltf_lex_memcmp_callback((yytext), ASSET, (((yyleng) < ASSET_LENG) ? (yyleng) : ASSET_LENG), (yyextra)))
    {
        return YYTOKEN_ASSET;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), COPYRIGHT, (((yyleng) < COPYRIGHT_LENG) ? (yyleng) : COPYRIGHT_LENG), (yyextra)))
    {
        return YYTOKEN_COPYRIGHT;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), GENERATOR, (((yyleng) < GENERATOR_LENG) ? (yyleng) : GENERATOR_LENG), (yyextra)))
    {
        return YYTOKEN_GENERATOR;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), VERSION, (((yyleng) < VERSION_LENG) ? (yyleng) : VERSION_LENG), (yyextra)))
    {
        return YYTOKEN_VERSION;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MINVERSION, (((yyleng) < MINVERSION_LENG) ? (yyleng) : MINVERSION_LENG), (yyextra)))
    {
        return YYTOKEN_MINVERSION;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), SCENE, (((yyleng) < SCENE_LENG) ? (yyleng) : SCENE_LENG), (yyextra)))
    {
        return YYTOKEN_SCENE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), SCENES, (((yyleng) < SCENES_LENG) ? (yyleng) : SCENES_LENG), (yyextra)))
    {
        return YYTOKEN_SCENES;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), NODES, (((yyleng) < NODES_LENG) ? (yyleng) : NODES_LENG), (yyextra)))
    {
        return YYTOKEN_NODES;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), NAME, (((yyleng) < NAME_LENG) ? (yyleng) : NAME_LENG), (yyextra)))
    {
        return YYTOKEN_NAME;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), CAMERA, (((yyleng) < CAMERA_LENG) ? (yyleng) : CAMERA_LENG), (yyextra)))
    {
        return YYTOKEN_CAMERA;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), CHILDREN, (((yyleng) < CHILDREN_LENG) ? (yyleng) : CHILDREN_LENG), (yyextra)))
    {
        return YYTOKEN_CHILDREN;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), SKIN, (((yyleng) < SKIN_LENG) ? (yyleng) : SKIN_LENG), (yyextra)))
    {
        return YYTOKEN_SKIN;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MATRIX, (((yyleng) < MATRIX_LENG) ? (yyleng) : MATRIX_LENG), (yyextra)))
    {
        return YYTOKEN_MATRIX;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MESH, (((yyleng) < MESH_LENG) ? (yyleng) : MESH_LENG), (yyextra)))
    {
        return YYTOKEN_MESH;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), ROTATION, (((yyleng) < ROTATION_LENG) ? (yyleng) : ROTATION_LENG), (yyextra)))
    {
        return YYTOKEN_ROTATION;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), SCALE, (((yyleng) < SCALE_LENG) ? (yyleng) : SCALE_LENG), (yyextra)))
    {
        return YYTOKEN_SCALE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), TRANSLATION, (((yyleng) < TRANSLATION_LENG) ? (yyleng) : TRANSLATION_LENG), (yyextra)))
    {
        return YYTOKEN_TRANSLATION;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), WEIGHTS, (((yyleng) < WEIGHTS_LENG) ? (yyleng) : WEIGHTS_LENG), (yyextra)))
    {
        return YYTOKEN_WEIGHTS;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), BUFFERS, (((yyleng) < BUFFERS_LENG) ? (yyleng) : BUFFERS_LENG), (yyextra)))
    {
        return YYTOKEN_BUFFERS;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), BYTELENGTH, (((yyleng) < BYTELENGTH_LENG) ? (yyleng) : BYTELENGTH_LENG), (yyextra)))
    {
        return YYTOKEN_BYTELENGTH;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), URI, (((yyleng) < URI_LENG) ? (yyleng) : URI_LENG), (yyextra)))
    {
        return YYTOKEN_URI;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), BUFFERVIEWS, (((yyleng) < BUFFERVIEWS_LENG) ? (yyleng) : BUFFERVIEWS_LENG), (yyextra)))
    {
        return YYTOKEN_BUFFERVIEWS;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), BUFFER, (((yyleng) < BUFFER_LENG) ? (yyleng) : BUFFER_LENG), (yyextra)))
    {
        return YYTOKEN_BUFFER;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), BYTEOFFSET, (((yyleng) < BYTEOFFSET_LENG) ? (yyleng) : BYTEOFFSET_LENG), (yyextra)))
    {
        return YYTOKEN_BYTEOFFSET;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), BYTESTRIDE, (((yyleng) < BYTESTRIDE_LENG) ? (yyleng) : BYTESTRIDE_LENG), (yyextra)))
    {
        return YYTOKEN_BYTESTRIDE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), TARGET, (((yyleng) < TARGET_LENG) ? (yyleng) : TARGET_LENG), (yyextra)))
    {
        return YYTOKEN_TARGET;
    }
        else if (0 == gltf_lex_memcmp_callback((yytext), ACCESSORS, (((yyleng) < ACCESSORS_LENG) ? (yyleng) : ACCESSORS_LENG), (yyextra)))
    {
        return YYTOKEN_ACCESSORS;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), BUFFERVIEW, (((yyleng) < BUFFERVIEW_LENG) ? (yyleng) : BUFFERVIEW_LENG), (yyextra)))
    {
        return YYTOKEN_BUFFERVIEW;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), COMPONENTTYPE, (((yyleng) < COMPONENTTYPE_LENG) ? (yyleng) : COMPONENTTYPE_LENG), (yyextra)))
    {
        return YYTOKEN_COMPONENTTYPE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), NORMALIZED, (((yyleng) < NORMALIZED_LENG) ? (yyleng) : NORMALIZED_LENG), (yyextra)))
    {
        return YYTOKEN_NORMALIZED;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), COUNT, (((yyleng) < COUNT_LENG) ? (yyleng) : COUNT_LENG), (yyextra)))
    {
        return YYTOKEN_COUNT;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), TYPE, (((yyleng) < TYPE_LENG) ? (yyleng) : TYPE_LENG), (yyextra)))
    {
        return YYTOKEN_TYPE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), SCALAR, (((yyleng) < SCALAR_LENG) ? (yyleng) : SCALAR_LENG), (yyextra)))
    {
        return YYTOKEN_SCALAR;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), VEC2, (((yyleng) < VEC2_LENG) ? (yyleng) : VEC2_LENG), (yyextra)))
    {
        return YYTOKEN_VEC2;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), VEC3, (((yyleng) < VEC3_LENG) ? (yyleng) : VEC3_LENG), (yyextra)))
    {
        return YYTOKEN_VEC3;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), VEC4, (((yyleng) < VEC4_LENG) ? (yyleng) : VEC4_LENG), (yyextra)))
    {
        return YYTOKEN_VEC4;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MAT2, (((yyleng) < MAT2_LENG) ? (yyleng) : MAT2_LENG), (yyextra)))
    {
        return YYTOKEN_MAT2;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MAT3, (((yyleng) < MAT3_LENG) ? (yyleng) : MAT3_LENG), (yyextra)))
    {
        return YYTOKEN_MAT3;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MAT4, (((yyleng) < MAT4_LENG) ? (yyleng) : MAT4_LENG), (yyextra)))
    {
        return YYTOKEN_MAT4;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MAX, (((yyleng) < MAX_LENG) ? (yyleng) : MAX_LENG), (yyextra)))
    {
        return YYTOKEN_MAX;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), MIN, (((yyleng) < MIN_LENG) ? (yyleng) : MIN_LENG), (yyextra)))
    {
        return YYTOKEN_MIN;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), SPARSE, (((yyleng) < SPARSE_LENG) ? (yyleng) : SPARSE_LENG), (yyextra)))
    {
        return YYTOKEN_SPARSE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), TRUE, (((yyleng) < TRUE_LENG) ? (yyleng) : TRUE_LENG), (yyextra)))
    {
        return YYTOKEN_TRUE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), FALSE, (((yyleng) < FALSE_LENG) ? (yyleng) : FALSE_LENG), (yyextra)))
    {
        return YYTOKEN_FALSE;
    }
    else if (0 == gltf_lex_memcmp_callback((yytext), TOKEN_NULL, (((yyleng) < TOKEN_NULL_LENG) ? (yyleng) : TOKEN_NULL_LENG), (yyextra)))
    {
        return YYTOKEN_NULL;
    }
    else
    {
        lvalp->m_temp_string_version = gltf_lex_yacc_temp_string_init_callback((yyextra));
        gltf_lex_yacc_temp_string_set_callback(lvalp->m_temp_string_version, (yytext), (yyleng), (yyextra));
        return YYTOKEN_STRING;
    }
}
	YY_BREAK
/* catch-all rule for any other single characters */
case 12:
YY_RULE_SETUP
#line 382 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{ 
        char msg_fatal_error[4096];
        assert(((yyleng) == 1));
        snprintf(msg_fatal_error, 4096, "lex error, unexpected \'%s\'", (yytext));
        YY_FATAL_ERROR(msg_fatal_error);
    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 389 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
{
        yypop_buffer_state(yyscanner);
        if(!YY_CURRENT_BUFFER)
        {
            return YYEOF; //yyterminate
        }
    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 397 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"
ECHO;
	YY_BREAK
#line 1563 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.inl"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	int yy_c = 128;
	const struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 397 "/home/HanetakaYuminaga/Documents/PatriotEngine/bldsys/posix_linux_x11/../../src/pt_gfx_mesh_base_gltf_lex.l"

