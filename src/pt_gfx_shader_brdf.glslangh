//
// Copyright (C) YuqiaoZhang(HanetakaChou)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef _PT_GFX_SHADER_BRDF_GLSLANGH_
#define _PT_GFX_SHADER_BRDF_GLSLANGH_ 1

#include "pt_gfx_shader_math_consts.glslangh"

highp float D_TR(highp float alpha, highp float NdotH)
{
	// Trowbridge-Reitz

	// Equation 9.41 of Real-Time Rendering Fourth Edition: "Although “Trowbridge-Reitz distribution” is technically the correct name"
	// Equation 8.11 of PBR Book: https://pbr-book.org/3ed-2018/Reflection_Models/Microfacet_Models#MicrofacetDistributionFunctions
	highp float alpha2 = alpha * alpha;
	highp float denominator = 1.0 + NdotH * (NdotH * alpha2 - NdotH);
	return INV_PI * (alpha2 / (denominator * denominator));
}

highp float V_HC_TR(highp float alpha, highp float NdotV, highp float NdotL)
{
	// Height-Correlated Trowbridge-Reitz

	// Lambda:
	// Equation 8.13 of PBR Book: https://pbr-book.org/3ed-2018/Reflection_Models/Microfacet_Models#MaskingandShadowing

	// Lambda for Trowbridge-Reitz:
	// Equation 9.42 of Real-Time Rendering Fourth Edition
	// Figure 8.18 of PBR Book: https://pbr-book.org/3ed-2018/Reflection_Models/Microfacet_Models#MaskingandShadowing
	// Λ(V) = 0.5*(-1.0 + (1.0/NoV)*sqrt(alpha^2 + (1.0 - alpha^2)*NoV^2))
	// Λ(L) = 0.5*(-1.0 + (1.0/NoL)*sqrt(alpha^2 + (1.0 - alpha^2)*NoL^2))

	// G2
	// Equation 9.31 of Real-Time Rendering Fourth Edition
	// PBR Book / 8.4.3 Masking and Shadowing: "A more accurate model can be derived assuming that microfacet visibility is more likely the higher up a given point on a microface"
	// G2 = 1.0/(1.0 + Λ(V) + Λ(L)) = (2.0*NoV*NoL)/(NoL*sqrt(alpha^2 + (1.0 - alpha^2)*NoV^2) + NoV*sqrt(alpha^2 + (1.0 - alpha^2)*NoL^2))

	// V = G2/(4.0*NoV*NoL) = 0.5/(NoL*sqrt(alpha^2 + (1.0 - alpha^2)*NoV^2) + NoV*sqrt(alpha^2 + (1.0 - alpha^2)*NoL^2))

	highp float alpha2 = alpha * alpha;
	highp float term_v = NdotL * sqrt(alpha2 + (1.0 - alpha2) * NdotV * NdotV);
	highp float term_L = NdotV * sqrt(alpha2 + (1.0 - alpha2) * NdotL * NdotL);
	// UE: [Vis_SmithJointApprox](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BRDF.ush#L380)
	// highp float term_v = NdotL * (alpha + (1.0 - alpha) * NdotV);
	// highp float term_L = NdotV * (alpha + (1.0 - alpha) * NdotL);
	return (0.5 / (term_v + term_L));
}

highp vec3 F_Schlick(highp vec3 f0, highp float f90, highp float LdotH)
{
	// Equation 9.18 of Real-Time Rendering Fourth Edition
	// U3D: [F_Schlick](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/BSDF.hlsl#L45)
	highp float x = 1.0 - LdotH;
	highp float x2 = x * x;
	highp float x5 = x2 * x2 * x;
	return ((1.0 - x5) * f0 + f90 * x5);
}

highp vec3 F_Schlick(highp vec3 f0, highp float LdotH)
{
	// UE: [F_Schlick](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BRDF.ush#L415)
	// Anything less than 2% is physically impossible and is instead considered to be shadowing
	highp float f90 = clamp(50.0 * f0.g, 0.0, 1.0);

	return F_Schlick(f0, f90, LdotH);
}

highp vec3 Diffuse_Lambert(highp vec3 diffuse_color)
{
	// UE: [Diffuse_Lambert](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BRDF.ush#L247)
	// U3D: [Lambert](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/BSDF.hlsl#L391)

	return diffuse_color * INV_PI;
}

highp vec3 Diffuse_Burley(highp vec3 diffuse_color, highp float roughness, highp float NdotV, highp float NdotL, highp float LdotH)
{
	// UE: [Diffuse_Burley](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BRDF.ush#L253)
	// U3D: [DisneyDiffuse](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/BSDF.hlsl#L414)

	highp float f90 = 0.5 + 2.0 * LdotH * LdotH * roughness;

	highp vec3 term_v = F_Schlick(vec3(1.0, 1.0, 1.0), f90, NdotV);
	highp vec3 term_L = F_Schlick(vec3(1.0, 1.0, 1.0), f90, NdotL);

	return diffuse_color * (INV_PI * term_v * term_L);
}

highp vec3 Specular_TR(highp vec3 specular_color, highp float roughness, highp float NdotV, highp float NdotL, highp float NdotH, highp float LdotH)
{
	// Real-Time Rendering Fourth Edition / 9.8.1 Normal Distribution Functions: "In the Disney principled shading model, Burley[214] exposes the roughness control to users as αg = r2, where r is the user-interface roughness parameter value between 0 and 1."
	highp float alpha = roughness * roughness;

	highp float D = D_TR(alpha, NdotH);
	highp float BRDF_V = V_HC_TR(alpha, NdotV, NdotL);
	highp vec3 F = F_Schlick(specular_color, LdotH);
	return (D * BRDF_V) * F;
}

highp vec3 Dual_Specular_TR(highp float material_roughness_0, highp float material_roughness_1, highp float material_lobe_mix, highp vec3 specular_color, highp float roughness, highp float subsurface_mask, highp float NdotV, highp float NdotL, highp float NdotH, highp float LdotH)
{
	highp float material_roughness_average = mix(material_roughness_0, material_roughness_1, material_lobe_mix);
	highp float average_to_roughness_0 = material_roughness_0 / material_roughness_average;
	highp float average_to_roughness_1 = material_roughness_1 / material_roughness_average;

	highp float surface_roughness_average = roughness;
	highp float surface_roughness_0 = clamp(average_to_roughness_0 * surface_roughness_average, 0.02, 1.0);
	highp float surface_roughness_1 = clamp(average_to_roughness_1 * surface_roughness_average, 0.0, 1.0);

	// UE4: SubsurfaceProfileBxDF
	surface_roughness_0 = mix(1.0, surface_roughness_0, clamp(10.0 * subsurface_mask, 0.0, 1.0));
	surface_roughness_1 = mix(1.0, surface_roughness_1, clamp(10.0 * subsurface_mask, 0.0, 1.0));

	highp vec3 radiance_specular_0 = Specular_TR(specular_color, surface_roughness_0, NdotV, NdotL, NdotH, LdotH);
	highp vec3 radiance_specular_1 = Specular_TR(specular_color, surface_roughness_1, NdotV, NdotL, NdotH, LdotH);
	highp vec3 radiance_specular = mix(radiance_specular_0, radiance_specular_1, material_lobe_mix);
	return radiance_specular;
}

highp vec3 EvaluateBRDF_Infinitesimal(highp vec3 diffuse_color, highp vec3 specular_color, highp float roughness, highp float subsurface_mask, highp vec3 N, highp vec3 V, highp vec3 L, highp vec3 irradiance_light)
{
	highp float non_clamped_NdotV = dot(N, V);
	highp float non_clamped_NdotL = dot(N, L);

	// Real-Time Rendering Fourth Edition / 9.8 BRDF Models for Surface Reflection: "Hammon[657]. Hammon also shows a method to optimize the BRDF implementation by calculating n·h and l·h without calculating the vector h itself."
	// |L + V|^2 = L^2 + V^2 + 2L·V = 1 + 1 + 2L·V
	// N·H = N·((L + V)/(|L + V|)) = (N·L + N·V)/(|L + V|)
	// L·H = L·((L + V)/(|L + V|)) = (L^2 + L·V)/(|L + V|)
	// V·H = V·((L + V)/(|L + V|)) = (L·V + V^2)/(|L + V|)
	// 2L·H = 2V·H = L·H + V·H = (L^2 + L·V + L·V + V^2)/(|L + V|) = (|L + V|^2)/(|L + V|) = |L + V| = 1 + 1 + 2L·V
	// ⇒ L·H = 0.5 * |L + V| = (0.5 * |L + V|^2)/(|L + V|) =(0.5 * (1 + 1 + 2L·V))/(|L + V|) = 1/(|L + V|) + (L·V)/(|L + V|)
	// UE: [Init](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BRDF.ush#L31)
	// U3D: [GetBSDFAngle](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl#L361)
	highp float non_clamped_VdotL = dot(V, L);
	highp float invLenH = inversesqrt(2.0 + 2.0 * non_clamped_VdotL);
	highp float NdotH = clamp((non_clamped_NdotL + non_clamped_NdotV) * invLenH, 0.0, 1.0);
	highp float LdotH = clamp(invLenH * non_clamped_VdotL + invLenH, 0.0, 1.0);

    // UE: [DefaultLitBxDF]https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ShadingModels.ush#L218
	// U3D: [ClampNdotV](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl#L349)
    highp float NdotV = clamp(non_clamped_NdotV, 0.0001, 1.0);
    highp float NdotL = clamp(non_clamped_NdotL, 0.0, 1.0);

    // Type == Skin
	highp vec3 diffuse_radiance = Diffuse_Burley(diffuse_color, roughness, NdotV, NdotL, LdotH) * NdotL * irradiance_light;

    // UE: [FSubsurfaceProfileStruct](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Source/Runtime/Engine/Classes/Engine/SubsurfaceProfile.h#L97)
	highp const float material_roughness_0 = 0.75;
	highp const float material_roughness_1 = 1.30;
	highp const float material_lobe_mix = 0.85;

	highp vec3 specular_radiance = Dual_Specular_TR(material_roughness_0, material_roughness_1, material_lobe_mix, specular_color, roughness, subsurface_mask, NdotV, NdotL, NdotH, LdotH) * NdotL * irradiance_light;
	
	return diffuse_radiance + specular_radiance;
}

#endif