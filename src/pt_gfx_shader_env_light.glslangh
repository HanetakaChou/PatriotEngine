//
// Copyright (C) YuqiaoZhang(HanetakaChou)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef _PT_GFX_SHADER_ENV_LIGHT_GLSLANGH_
#define _PT_GFX_SHADER_ENV_LIGHT_GLSLANGH_ 1

#include "pt_gfx_shader_brdf.glslangh"

highp vec3 EvaluateDiffuseEnvironmentLighting(highp vec3 diffuse_color, highp vec3 N, highp vec4 irradiance_normal_distribution[7])
{
    // UE: [DiffuseIrradianceCopyPS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L438)
    // UE: [ComputeSkyEnvMapDiffuseIrradianceCS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L534)
    // U3D: [AmbientProbeConvolution](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Sky/AmbientProbeConvolution.compute#L36)

    // UE: [GetSkyLighting](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BasePassPixelShader.usf#L557)
    // U3D: [ProbeVolumeEvaluateSphericalHarmonics](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl#L553)

    highp vec3 irradiance_normal;
    {

        // "Stupid Spherical Harmonics (SH)" / "Appendix A10 Shader/CPU code for Irradiance Environment Maps"

        // P(0, 0) =  0.282094791773878140
        // P(1,-1) = -0.488602511902919920*y
        // P(1, 0) =  0.488602511902919920*z
        // P(1, 1) = -0.488602511902919920*x
        // P(2,-2) =  1.092548430592079200*x*y
        // P(2,-1) = -1.092548430592079200*y*z
        // P(2, 0) =  0.946174695757560080*z*z + -0.315391565252520050
        // P(2, 1) = -1.092548430592079200*x*z
        // P(2, 2) =  0.546274215296039590*(x*x - y*y)

        // x: P(1, 1)
        // y: P(1,-1)
        // z: P(1, 0)
        // w: P(0, 0) + part of P(2, 0)
        highp vec4 cAr = irradiance_normal_distribution[0];
        highp vec4 cAg = irradiance_normal_distribution[1];
        highp vec4 cAb = irradiance_normal_distribution[2];
        highp vec3 x1 = vec3(dot(cAr, vec4(N, 1.0)), dot(cAg, vec4(N, 1.0)), dot(cAb, vec4(N, 1.0)));

        // x: P(2,-2)
        // y: P(2,-1)
        // z: part of P(2, 0)
        // w: P(2, 1)
        highp vec4 cBr = irradiance_normal_distribution[3];
        highp vec4 cBg = irradiance_normal_distribution[4];
        highp vec4 cBb = irradiance_normal_distribution[5];
        highp vec4 vB = N.xyzz * N.yzzx;
        highp vec3 x2 = vec3(dot(cBr, vB), dot(cBg, vB), dot(cBb, vB));

        // r: P(2, 2)
        // g: P(2, 2)
        // b: P(2, 2)
        highp float vC = N.x * N.x - N.y * N.y;
        highp vec4 cC = irradiance_normal_distribution[6];
        highp vec3 x3 = cC.rgb * vC;

        irradiance_normal = x1 + x2 + x3;
    }

    // TODO: why NOT multiply "INV_PI" ?
    highp vec3 diffuse_radiance = (Diffuse_Lambert(diffuse_color) * PI) * irradiance_normal;

    return diffuse_radiance;
}

void EvaluateSpecularEnvironmentLighting()
{
    // UE: [FilterPS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L330)
    // UE: [FilterCS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L319)
    // U3D: [RenderCubemapGGXConvolution](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Sky/SkyManager.cs#L508)

    // UE: [EnvBRDF](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentPixelShader.usf#L334)
    // U3D: [EvaluateBSDF_Env](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl#L454)


    
}

void EvaluateEnvironmentLighting()
{
    // U3D: [ApplyAmbientOcclusionFactor](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl#L2020)
}

#endif