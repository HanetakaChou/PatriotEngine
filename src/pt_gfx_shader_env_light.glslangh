//
// Copyright (C) YuqiaoZhang(HanetakaChou)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef _PT_GFX_SHADER_ENV_LIGHT_GLSLANGH_
#define _PT_GFX_SHADER_ENV_LIGHT_GLSLANGH_ 1

#include "pt_gfx_shader_brdf.glslangh"
#include "pt_gfx_shader_preint_hdr.glslangh"

// set 0: global
// set 1: per mesh
// set 2: per material

layout(set = 0, binding = 0) uniform global_set_perframe_binding
{
    highp vec4 Diffuse_Irradiance_Normal_Distribution[7];
};

layout(set = 0, binding = 2) uniform highp samplerCube Specular_PreIntegratedLD_Distribution;

highp vec3 EvaluateDiffuseEnvironmentLighting(highp vec3 diffuse_color, highp vec3 specular_color, highp vec3 N, highp vec4 irradiance_normal_distribution[7])
{
    // UE: [DiffuseIrradianceCopyPS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L438)
    // UE: [ComputeSkyEnvMapDiffuseIrradianceCS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L534)
    // U3D: [AmbientProbeConvolution](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Sky/AmbientProbeConvolution.compute#L36)

    // UE: [GetSkyLighting](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BasePassPixelShader.usf#L557)
    // U3D: [ProbeVolumeEvaluateSphericalHarmonics](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl#L553)

    highp vec3 irradiance_normal;
    {

        // "Stupid Spherical Harmonics (SH)" / "Appendix A10 Shader/CPU code for Irradiance Environment Maps"

        // P(0, 0) =  0.282094791773878140
        // P(1,-1) = -0.488602511902919920*y
        // P(1, 0) =  0.488602511902919920*z
        // P(1, 1) = -0.488602511902919920*x
        // P(2,-2) =  1.092548430592079200*x*y
        // P(2,-1) = -1.092548430592079200*y*z
        // P(2, 0) =  0.946174695757560080*z*z + -0.315391565252520050
        // P(2, 1) = -1.092548430592079200*x*z
        // P(2, 2) =  0.546274215296039590*(x*x - y*y)

        // x: P(1, 1)
        // y: P(1,-1)
        // z: P(1, 0)
        // w: P(0, 0) + part of P(2, 0)
        highp vec4 cAr = irradiance_normal_distribution[0];
        highp vec4 cAg = irradiance_normal_distribution[1];
        highp vec4 cAb = irradiance_normal_distribution[2];
        highp vec3 x1 = vec3(dot(cAr, vec4(N, 1.0)), dot(cAg, vec4(N, 1.0)), dot(cAb, vec4(N, 1.0)));

        // x: P(2,-2)
        // y: P(2,-1)
        // z: part of P(2, 0)
        // w: P(2, 1)
        highp vec4 cBr = irradiance_normal_distribution[3];
        highp vec4 cBg = irradiance_normal_distribution[4];
        highp vec4 cBb = irradiance_normal_distribution[5];
        highp vec4 vB = N.xyzz * N.yzzx;
        highp vec3 x2 = vec3(dot(cBr, vB), dot(cBg, vB), dot(cBb, vB));

        // r: P(2, 2)
        // g: P(2, 2)
        // b: P(2, 2)
        highp float vC = N.x * N.x - N.y * N.y;
        highp vec4 cC = irradiance_normal_distribution[6];
        highp vec3 x3 = cC.rgb * vC;

        irradiance_normal = x1 + x2 + x3;
    }

    // UE: [EnvBRDFApproxFullyRough](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BasePassPixelShader.usf#L1055)
    // U3D: [GetDiffuseOrDefaultColor](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl#L1237)
    {
        diffuse_color = diffuse_color + specular_color * 0.45;
    }

    // By "Equation (11.9)" of Real-Time Rendering Fourth Edition, "ambient_occlusion" should be multiplied by "π".  
    highp vec3 diffuse_radiance = Diffuse_Lambert(diffuse_color) * irradiance_normal;

    return diffuse_radiance;
}

highp vec3 EvaluateSpecularEnvironmentLighting(highp vec3 specular_color, highp float roughness, highp vec3 N, highp vec3 R, highp float NdotV, highp samplerCube PreIntegratedLD_Distribution)
{
    // UE: [FilterPS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L330)
    // UE: [FilterCS](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShaders.usf#L319)
    // U3D: [RenderCubemapGGXConvolution](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Sky/SkyManager.cs#L508)

    // UE: [ReflectionEnvironment](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentPixelShader.usf#L205)
    // U3D: [EvaluateBSDF_Env](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl#L454)

    highp vec3 DVF = PreIntegratedHDR_TR(specular_color, roughness, NdotV);

    // UE: [GetOffSpecularPeakReflectionDir](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShared.ush#L120)
    // U3D: [GetSpecularDominantDir](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/ImageBasedLighting.hlsl#L105)
    {
        // Real-Time Rendering Fourth Edition / 9.8.1 Normal Distribution Functions: "In the Disney principled shading model, Burley[214] exposes the roughness control to users as αg = r2, where r is the user-interface roughness parameter value between 0 and 1."
        highp float alpha = roughness * roughness;

        R = mix(N, R, (sqrt(1.0 - alpha) + alpha) * (1.0 - alpha));
    }

    // UE: [GetSkyLightReflection](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ReflectionEnvironmentShared.ush#L38)
    // U3D: [SampleEnvWithDistanceBaseRoughness](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightEvaluation.hlsl#L600)
    highp vec3 LD;
    {
#if defined(GL_EXT_samplerless_texture_functions) && (GL_EXT_samplerless_texture_functions)
        highp int CubemapMaxMip = textureQueryLevels(PreIntegratedLD_Distribution) - 1;
#else
        // #error "#extension GL_EXT_samplerless_texture_functions : enable"
        highp int CubemapMaxMip = 7;
#endif
        highp const float REFLECTION_CAPTURE_ROUGHEST_MIP = 1.0;
        highp const float REFLECTION_CAPTURE_ROUGHNESS_MIP_SCALE = 1.2;
        highp float LevelFrom1x1 = REFLECTION_CAPTURE_ROUGHEST_MIP - REFLECTION_CAPTURE_ROUGHNESS_MIP_SCALE * log2(max(roughness, 0.001));

        highp float AbsoluteSpecularMip = float(CubemapMaxMip) - 1.0 - LevelFrom1x1;

        LD = texture(PreIntegratedLD_Distribution, R, AbsoluteSpecularMip).rgb;
    }

    highp vec3 specular_radiance = LD * DVF;

    return specular_radiance;
}

highp vec3 EvaluateEnvironmentLighting(highp vec3 diffuse_color, highp vec3 specular_color, highp float roughness, highp vec3 N, highp vec3 V, highp float raw_ambient_occlusion)
{
    // highp vec3 R = reflect(-V, N);
    highp vec3 R = 2.0 * dot(V, N) * N - V;
    // UE: [DefaultLitBxDF]https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/ShadingModels.ush#L218
    // U3D: [ClampNdotV](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl#L349)
    highp float NdotV = clamp(dot(N, V), 0.0, 1.0); // 0.0001, 1.0);

    highp vec3 diffuse_radiance = EvaluateDiffuseEnvironmentLighting(diffuse_color, specular_color, N, Diffuse_Irradiance_Normal_Distribution);
    highp vec3 specular_radiance = EvaluateSpecularEnvironmentLighting(specular_color, roughness, N, R, NdotV, Specular_PreIntegratedLD_Distribution);

    highp vec3 ambient_occlusion = AO_InterReflections(AO_BentNormal(raw_ambient_occlusion, N), diffuse_color);

    // UE: [GBufferAO](https://github.com/EpicGames/UnrealEngine/blob/4.27/Engine/Shaders/Private/BasePassPixelShader.usf#L1072)
    highp float specular_color_luminance = dot(specular_color, vec3(0.3, 0.59, 0.11));
    highp float raw_directional_occlusion = AO_InterReflections(DO_BentNormal(raw_ambient_occlusion, N), vec3(specular_color_luminance, specular_color_luminance, specular_color_luminance)).g;

    highp float directional_occlusion = DO_FromAO(raw_directional_occlusion, roughness, NdotV);

    // U3D: [ApplyAmbientOcclusionFactor](https://github.com/Unity-Technologies/Graphics/blob/v10.8.0/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl#L2020)

    // By "Equation (11.9)" of Real-Time Rendering Fourth Edition, "ambient_occlusion" should be multiplied by "PI".  
    return (diffuse_radiance * PI * ambient_occlusion + specular_radiance * directional_occlusion);
}

#endif