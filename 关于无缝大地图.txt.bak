无缝大地图可以在逻辑层实现，因此从图形引擎的核心层中剔除

无缝大地图涉及到的技术难度并不会很高，因为魔兽世界早在2008年就实现了无缝大地图，因此一定可以在2008年以前的技术中找到无缝大地图的实现方案 //实际上，无缝大地图只是一种工程上的策略，可以在逻辑层实现，并不涉及到论文

//-------------------------------------------------------------------------------------
逻辑层
求出视锥体的AABB（求出8个顶点后取MaxMin）在水平二维平面上的投影，根据投影的位置索引（时间复杂度O(1)）需要“命中”相应的区块（Tile） 
与CPU Cache中的LRU相似，“命中”会导致未加载的区块加载（暂时认为显存的容量是充足的，加载一定会成功），同时当某个区块最近一次命中的时间与当前时间的差值大于一定值时，会被卸载

只加载摄像机所涉及的资源，而非整个Level 类比：Word只加载Doc中用户所浏览的页面，而非整个Doc
考虑到摄像机位于HBV中BV之间的接缝处的情形 类比：Word浏览在两个页面之间，则同时加载两个页面

资源加载以请求的方式发送到引擎层 加载显然是异步的 并不允许逻辑层直接访问资源 但是，引擎层有必要允许逻辑层查询加载是否已经被完成

//-------------------------------------------------------------------------------------
引擎层
响应来自逻辑层的请求，加载资源 //与一般意义上的资源加载相同相同
//引擎层在加载资源时构造层次性包围体（这个包围体的粒度会更细用于视锥体剔除，注意区别于逻辑层的包围体，）
//引擎层构造的包围体用于视锥体剔除 //Word浏览在两个页面之间时，只渲染前一页面的下半部分和后一页面的上半部分
//视锥体剔除得到一个列表 列表中的所有对象都已被加载并且已经过视锥体剔除 //与一般意义上的视锥体剔除相同

//-------------------------------------------------------------------------------------
资产
引擎层只提供程序式网格的接口而不再定义资产的格式，加载资源时由逻辑层负责

//-------------------------------------------------------------------------------------
物理模拟和寻路
无缝大地图的物理模拟和寻路并不能根据摄像机来进行流式加载 //这可能是魔兽世界不允许寻路的理由？？？