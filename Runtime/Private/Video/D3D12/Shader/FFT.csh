
//XDSP
//https://github.com/Microsoft/DirectXMath/wiki/XDSP

inline void DFT4(
	in float4 T_R,	//Temporal_Real
	out float4 F_R,	//Frequency_Real
	out float4 F_I	//Frequency_Imaginary
)
{
	//Temporal_Real->Frequency_Real
	//对k∈{0 - N-1} x[k].R = {n=0 - n=N-1}∑(x[n]*cos(k*(2π/N)*n)) 其中N=4 

	//| 1  1  1  1 |   | T_R[0] |   | F_R[0] |
	//| 1  0 -1  0 | * | T_R[1] | = | F_R[1] |
	//| 1 -1  1 -1 |   | T_R[2] |   | F_R[2] |
	//| 1  0 -1  0 |   | T_R[3] |   | F_R[3] |

	//Temporal_Real->Frequency_Imaginary
	//对k∈{0 - N-1} x[k].I = {n=0 - n=N-1}∑(x[n]*-sin(k*(2π/N)*n)) 其中N=4 

	//| 0  0  0  0 |   | T_R[0] |   | F_I[0] |
	//| 0 -1  0  1 | * | T_R[1] | = | F_I[1] |
	//| 0  0  0  0 |   | T_R[2] |   | F_I[2] |
	//| 0  1  0 -1 |   | T_R[3] |   | F_I[3] |

	static const float4x4 DFT4_R = float4x4(
		float4(1.0f, 1.0f, 1.0f, 1.0f),
		float4(1.0f, 0.0f, -1.0f, 0.0f),
		float4(1.0f, -1.0f, 1.0f, -1.0f),
		float4(1.0f, 0.0f, -1.0f, 0.0f)
		);

	static const float4x4 DFT4_I = float4x4(
		float4(0.0f, 0.0f, 0.0f, 0.0f),
		float4(0.0f, -1.0f, 0.0f, 1.0f),
		float4(0.0f, 0.0f, 0.0f, 0.0f),
		float4(0.0f, 1.0f, 0.0f, -1.0f)
		);


	//HLSL中 行向量
	F_R = mul(T_R, DFT4_R);
	F_I = mul(T_R, DFT4_I);
}

inline void FFT4(
	in float4 T_R,	//Temporal_Real
	out float4 F_R,	//Frequency_Real
	out float4 F_I	//Frequency_Imaginary
)
{
	//--------------------------------------------------------------

	//FFT递归
	
	//已知 FFT_N/2{偶数} 和 FFT_N/2{奇数}[k] //注：索引从0开始且0为偶数
	//求 FFT_N

	//延拓
	//FFT_N_Part0[k] = FFT_N/2{偶数}[k]     k∈{0 - N/2-1} 
	//               = FFT_N/2{偶数}[k-N/2] k∈{N/2 - N-1}

	//延拓+移位
	//FFT_N_Part1[k] = Matrix_Twiddle * FFT_N/2{奇数}[k]     k∈{0 - N/2-1} 
	//               = Matrix_Twiddle * FFT_N/2{奇数}[k-N/2] k∈{N/2 - N-1}
	//             其中 Matrix_Twiddle = |  cos(k*(2π/N))  sin(k*(2π/N)) |
	//                                   | -sin(k*(2π/N))  cos(k*(2π/N)) |

	//叠加
	//FFT_N[k] = FFT_N_Part0[k] + FFT_N_Part1[k]

	//--------------------------------------------------------------
	
	//FFT1
	
	//Temporal_Real -> Frequency_Real
	
	//X{0}[0].R = x[0]
	//X{0}[0].I = 0
	//X{1}[0].R = x[1]
	//X{1}[0].I = 0
	//X{2}[0].R = x[2]
	//X{2}[0].I = 0
	//X{3}[0].R = x[3]
	//X{3}[0].I = 0


	//FFT1 -> FFT2
	
	//N = 2 且 k = 0
	//Matrix_Twiddle = | 1  0 |
	//                 | 0  1 |
	
	//N = 2 且 k = 1
	//Matrix_Twiddle = | -1  0 |
	//                 |  0 -1 |

	//X{0,2}[0].R = X{0}[0].R + dot(| 1   0 |,| X{2}[0].R  0 |) = X{0}[0].R + X{2}[0].R = x[0] + x[2]
	//X{0,2}[1].R = X{0}[0].R + dot(| -1  0 |,| X{2}[0].R  0 |) = X{0}[0].R - X{2}[0].R = x[0] - x[2]
	//X{1,3}[0].R = X{1}[0].R + dot(| 1   0 |,| X{3}[0].R  0 |) = X{1}[0].R + X{3}[0].R = x[1] + x[3]
	//X{1,3}[1].R = X{1}[0].R + dot(| -1  0 |,| X{3}[0].R  0 |) = X{1}[0].R - X{3}[0].R = x[1] - x[3]

	//X{0,2}[0].I = X{0}[0].I + dot(| 0   1 |,| 0  X{2}[0].I |) = X{0}[0].I + X{2}[0].I = 0
	//X{0,2}[1].I = X{0}[0].I + dot(| 0  -1 |,| 0  X{2}[0].I |) = X{0}[0].I - X{2}[0].I = 0
	//X{1,3}[0].I = X{1}[0].I + dot(| 0   1 |,| 0  X{3}[0].I |) = X{1}[0].I + X{3}[0].I = 0
	//X{1,3}[1].I = X{1}[0].I + dot(| 0  -1 |,| 0  X{3}[0].I |) = X{1}[0].I - X{3}[0].I = 0

	// | 1  0  1  0 |   | x[0] |   | X{0,2}[0].R |
	// | 1  0 -1  0 | * | x[1] | = | X{0,2}[1].R |
	// | 0  1  0  1 |   | x[2] |   | X{1,3}[0].R |
	// | 0  1  0 -1 |   | x[3] |   | X{1,3}[1].R |

	//FFT2 -> FFT4

	//N = 4 且 k = 0
	//Matrix_Twiddle = | 1  0 |
	//                 | 0  1 |

	//N = 4 且 k = 1
	//Matrix_Twiddle = |  0  1 |
	//                 | -1  0 |

	//N = 4 且 k = 2
	//Matrix_Twiddle = | -1   0 |
	//                 |  0  -1 |

	//N = 4 且 k = 3
	//Matrix_Twiddle = | 0  -1 |
	//                 | 1   0 |

	//X{0,1,2,3}[0].R = X{0,2}[0].R + dot(|  1  0 |,| X{1,3}[0].R  X{1,3}[0].I |) = X{0,2}[0].R + X{1,3}[0].R
	//X{0,1,2,3}[1].R = X{0,2}[1].R + dot(|  0  1 |,| X{1,3}[1].R  X{1,3}[1].I |) = X{0,2}[1].R + X{1,3}[1].I = X{0,2}[1].R
	//X{0,1,2,3}[2].R = X{0,2}[0].R + dot(| -1  0 |,| X{1,3}[0].R  X{1,3}[0].I |) = X{0,2}[0].R - X{1,3}[0].R 
	//X{0,1,2,3}[3].R = X{0,2}[1].R + dot(|  0 -1 |,| X{1,3}[1].R  X{1,3}[1].I |) = X{0,2}[1].R - X{1,3}[1].I = X{0,2}[1].R

	//X{0,1,2,3}[0].I = X{0,2}[0].I + dot(|  0  1 |,| X{1,3}[0].R  X{1,3}[0].I |) = X{0,2}[0].I + X{1,3}[0].I = 0
	//X{0,1,2,3}[1].I = X{0,2}[1].I + dot(| -1  0 |,| X{1,3}[1].R  X{1,3}[1].I |) = X{0,2}[1].I - X{1,3}[1].R = - X{1,3}[1].R
	//X{0,1,2,3}[2].I = X{0,2}[0].I + dot(|  0 -1 |,| X{1,3}[0].R  X{1,3}[0].I |) = X{0,2}[0].I - X{1,3}[0].I = 0
	//X{0,1,2,3}[3].I = X{0,2}[1].I + dot(|  1  0 |,| X{1,3}[1].R  X{1,3}[1].I |) = X{0,2}[1].I + X{1,3}[1].R = X{1,3}[1].R

	// | 1  0  1  0 |   | X{0,2}[0].R |   | X{0,1,2,3}[0].R |
	// | 0  1  0  0 | * | X{0,2}[1].R | = | X{0,1,2,3}[1].R |
	// | 1  0 -1  0 |   | X{1,3}[0].R |   | X{0,1,2,3}[2].R |
	// | 0  1  0  0 |   | X{1,3}[1].R |   | X{0,1,2,3}[3].R |

	// | 0  0  0  0 |   | X{0,2}[0].R |   | X{0,1,2,3}[0].I |
	// | 0  0  0 -1 | * | X{0,2}[1].R | = | X{0,1,2,3}[1].I |
	// | 0  0  0  0 |   | X{1,3}[0].R |   | X{0,1,2,3}[2].I |
	// | 0  0  0  1 |   | X{1,3}[1].R |   | X{0,1,2,3}[3].I |


	//--------------------------------------------------------------

	//FFT2 -> FFT4

	// | 1  0  1  0 |   | x[0] |   | X{0,2}[0].R |
	// | 1  0 -1  0 | * | x[1] | = | X{0,2}[1].R |
	// | 0  1  0  1 |   | x[2] |   | X{1,3}[0].R |
	// | 0  1  0 -1 |   | x[3] |   | X{1,3}[1].R |

	float4 Temp = mad(float4(1.0f, -1.0f, 1.0f, -1.0f), T_R.zzww, T_R.xxyy);

	//FFT2 -> FFT4

	// | 1  0  1  0 |   | X{0,2}[0].R |   | X{0,1,2,3}[0].R |
	// | 0  1  0  0 | * | X{0,2}[1].R | = | X{0,1,2,3}[1].R |
	// | 1  0 -1  0 |   | X{1,3}[0].R |   | X{0,1,2,3}[2].R |
	// | 0  1  0  0 |   | X{1,3}[1].R |   | X{0,1,2,3}[3].R |

	F_R = mad(float4(1.0f, 0.0f, -1.0f, 0.0f), Temp.zzzz, Temp.xxyy);

	// | 0  0  0  0 |   | X{0,2}[0].R |   | X{0,1,2,3}[0].I |
	// | 0  0  0 -1 | * | X{0,2}[1].R | = | X{0,1,2,3}[1].I |
	// | 0  0  0  0 |   | X{1,3}[0].R |   | X{0,1,2,3}[2].I |
	// | 0  0  0  1 |   | X{1,3}[1].R |   | X{0,1,2,3}[3].I |

	F_I = float4(0.0f, -1.0f, 0.0f, 1.0f), Temp.wwww;
}

[numthreads(1, 1, 1)]
void main( uint3 DTid : SV_DispatchThreadID )
{

}