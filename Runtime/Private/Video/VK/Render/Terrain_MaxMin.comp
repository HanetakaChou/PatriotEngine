#version 310 es
layout(binding = 4) uniform highp sampler2D g_TextureIn;
layout(binding = 3, rgba32f) writeonly uniform highp image2D g_TextureOut; //ES 不支持 rg32f

shared int s_iHeightMax_Complement;
shared int s_iHeightMin_Complement;

//Dispatch(16, 16, 1) 256×256->(16×16)×(16×16)

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    //IEEE 754

    //符号位 1位 
	//符号位 0:正数
	//符号位 1:负数
    
	//阶码 8位 尾数 23位 
	//阶码 0: 非规约形式 阶码 -126 尾数 最高有效位为0
	//阶码 1-254: 规约形式 阶码 -126-127（移码127）尾数 最高有效位为1
	//阶码 255: 特殊值 //尾数 0：无穷大 //尾数 非0： NaN(Not a Number)

	//规约形式的浮点数 尾数最高有效位为1 显然不可能为零
	//零应当为非规约形式 且尾数为0 由于符号位不同 有正零和负零之分

	//大小比较
	//根据IEEE 754标准可知
	//当符号位表示正数或负数时，都满足：阶码和尾数组成的31位定点数的值越大，所表示的浮点数的绝对值就越大
	//符号位的行为接近定点数的“原码”表示（ 0：正数 且 1：负数 ），为方便比较大小可以转换为“补码”
	
	//算法骨架

	//浮点数->定点数“原码”
	//floatBitsToInt

	//定点数“原码”->定点数“补码”
	//符号位为0：不变
	//符号位为1：符号位不变且其余各位按位取反（相当于按位异或0X7FFFFFFF）->在以上结果的基础上加1
	//X -> ((X & 0X80000000) != 0) ? ((X^0X7FFFFFFF) + 1) : X

	//归约（基于定点数“补码”）
	//atomicMax
	//atomicMin

	//定点数“补码”->定点数“原码”
	//符号位为0：不变
	//符号位为1：符号位不变且其余各位按位取反（相当于按位异或0X7FFFFFFF）->在以上结果的基础上加1
	//X -> (X & 0X80000000) ? ((X^0X7FFFFFFF) + 1) : X

	//定点数“原码”->浮点数
	//intBitsToFloat

    //初始化
	if (gl_LocalInvocationID.x == 0U && gl_LocalInvocationID.y == 0U)
	{
		s_iHeightMax_Complement = 0X80800001;//0XFF7FFFFF = floatBitsToInt(-FLT_MAX) //0X80800001 = (0XFF7FFFFF^0X7FFFFFFF) + 1
		s_iHeightMin_Complement = 0X7F7FFFFF;//floatBitsToInt(FLT_MAX)
	}
	memoryBarrierShared();
    barrier();

    //映射
	float fHeight = texelFetch(g_TextureIn, ivec2(gl_GlobalInvocationID.xy), 0).x;
	int iHeight_Trueform = floatBitsToInt(fHeight); //浮点数->定点数“原码”
	int iHeight_Complement = ((iHeight_Trueform & 0X80000000) != 0) ? ((iHeight_Trueform ^ 0X7FFFFFFF) + 1) : iHeight_Trueform; //定点数“原码”->定点数“补码”

    //归约
	atomicMax(s_iHeightMax_Complement, iHeight_Complement);//基于定点数“补码”
	atomicMin(s_iHeightMin_Complement, iHeight_Complement);//基于定点数“补码”

    memoryBarrierShared();
    barrier();

    if (gl_LocalInvocationID.x == 0U && gl_LocalInvocationID.y == 0U)
	{
		int iHeightMax_Complement = s_iHeightMax_Complement;
		int iHeightMax_Trueform = ((iHeightMax_Complement & 0X80000000) != 0) ? ((iHeightMax_Complement ^ 0X7FFFFFFF) + 1) : iHeightMax_Complement; //定点数“补码”->定点数“原码”
		int iHeightMin_Complement = s_iHeightMin_Complement;
		int iHeightMin_Trueform = ((iHeightMin_Complement & 0X80000000) != 0) ? ((iHeightMin_Complement ^ 0X7FFFFFFF) + 1) : iHeightMin_Complement; //定点数“补码”->定点数“原码”

		float fHeightMax = intBitsToFloat(iHeightMax_Trueform); //定点数“原码”->浮点数
		float fHeightMin = intBitsToFloat(iHeightMin_Trueform); //定点数“原码”->浮点数

		imageStore(g_TextureOut, ivec2(gl_WorkGroupID.xy), vec4(fHeightMax, fHeightMin, 0.0f, 0.0f));
	}
}