<!--
***********************************************************************************************
Android.Common.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildThisFileDirectory)ImportBefore\*.props" Condition="Exists('$(MSBuildThisFileDirectory)ImportBefore')" />

  <PropertyGroup>
    <!-- By default we use the same bitness as the hosting platform -->
    <PreferredToolArchitecture Condition="'$(PreferredToolArchitecture)' == ''">x64</PreferredToolArchitecture>

    <!-- If OS is not x64, we cannot use x64 tools even if preferred -->
    <PreferredToolArchitecture Condition="'$(PreferredToolArchitecture)' == 'x64' and '$(PROCESSOR_ARCHITECTURE)' != 'AMD64' and '$(PROCESSOR_ARCHITEW6432)' != 'AMD64'">x86</PreferredToolArchitecture>

    <!-- All android build tools are native. Tasks will figure out real architecture (32 or 64 bit) of the tools they use-->
    <VCToolArchitecture>Native32Bit</VCToolArchitecture>
    <TargetRuntime>Native</TargetRuntime>
  </PropertyGroup>

  <!-- Android tools root folders -->
  <Import Project="$(AndroidCommonTargetsPath)\Android.Tools.props" />

  <!-- Various locations in NDK used in build  -->
  <Import Project="$(AndroidNDKProps)" />

  <PropertyGroup>
    <!-- Required for enabling Team Build projects -->
    <OutDirWasSpecified Condition=" '$(OutDir)'!='' AND '$(OutDirWasSpecified)'=='' ">true</OutDirWasSpecified>
    <OutDirWasSpecified Condition=" '$(OutDir)'=='' AND '$(OutDirWasSpecified)'=='' ">false</OutDirWasSpecified>

    <IntDir Condition="'$(IntDir)'=='' AND '$(IntermediateOutputPath)'!=''">$(IntermediateOutputPath)</IntDir>
    <IntDir Condition="'$(IntDir)'=='' AND '$(IntermediateOutputPath)'==''">$(Platform)\$(Configuration)\</IntDir>
    <OutDir Condition="'$(OutDir)'=='' AND '$(SolutionDir)' == ''">$(IntDir)</OutDir>
    <OutDir Condition="'$(OutDir)'=='' AND '$(SolutionDir)' != ''">$(SolutionDir)$(Platform)\$(Configuration)\</OutDir>

    <!-- Disable features not supported for Android projects -->
    <UseOfMFC>false</UseOfMFC>
    <UseOfATL>false</UseOfATL>
    <CharacterSet>Unicode</CharacterSet>

    <TargetOsAndVersion>$(AndroidAPILevel)</TargetOsAndVersion>
   </PropertyGroup>

  <!-- Default values -->
  <PropertyGroup>
    <TargetExt />
    <ProjectName Condition="'$(ProjectName)' == ''">$(MSBuildProjectName)</ProjectName>
    
    <Sysroot>$(VS_NdkRoot)\platforms\$(AndroidAPILevel)\arch-$(PlatformTarget)</Sysroot>

    <ExtensionsToDeleteOnClean Condition="'$(ExtensionsToDeleteOnClean)' == ''">*.d;*.tlog;$(ExtensionsToDeleteOnClean)</ExtensionsToDeleteOnClean>
    <PreBuildEventUseInBuild Condition="'$(PreBuildEventUseInBuild)' == ''">true</PreBuildEventUseInBuild>
    <PreLinkEventUseInBuild Condition="'$(PreLinkEventUseInBuild)' == ''">true</PreLinkEventUseInBuild>
    <PostBuildEventUseInBuild Condition="'$(PostBuildEventUseInBuild)' == ''">true</PostBuildEventUseInBuild>
    <NMakeBuildCommandLine>"$(VS_NdkRoot)\ndk-build.cmd"</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>"$(VS_NdkRoot)\ndk-build.cmd" -B</NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>"$(VS_NdkRoot)\ndk-build.cmd" clean</NMakeCleanCommandLine>
  </PropertyGroup>
  
  <!-- ConfigurationType Specific values -->
  <PropertyGroup Condition="'$(ConfigurationType)' == 'DynamicLibrary' or '$(ConfigurationType)' == ''">
    <!-- $(GenerateImportLib) should be set to true when you want to generate the import library as part of the BuildCompile pass rather than wait
         until the BuildLink pass for Linker to generate it. This allows circular dependencies between dlls to be satisfied when building using passes -->
    <ImpLibCompiled Condition="'$(GenerateImportLib)'=='true'">true</ImpLibCompiled>
    <LinkCompiled>true</LinkCompiled>
    <TargetExt>.so</TargetExt>
    <OutputType>library</OutputType>
    <TargetName Condition="'$(TargetName)' == ''">lib$(RootNamespace)</TargetName>
  </PropertyGroup>

   <PropertyGroup Condition="'$(ConfigurationType)' == 'StaticLibrary'">
    <LibCompiled>true</LibCompiled>
    <TargetExt>.a</TargetExt>
    <OutputType>staticlibrary</OutputType>
    <TargetName Condition="'$(TargetName)' == ''">lib$(RootNamespace)</TargetName>
  </PropertyGroup>

  <PropertyGroup>
    <!-- VCToolsInstallDir and WindowsSdkDir are required to statisfy the missing directory detection. -->
    <VCToolsInstallDir Condition="'$(VCToolsInstallDir)' == ''">VCToolsInstallDir_is_not_defined</VCToolsInstallDir>
    <WindowsSdkDir Condition="'$(WindowsSdkDir)' == ''">WindowsSdkDir_is_not_defined</WindowsSdkDir>
    <_CheckDev11ToolsInstalled>false</_CheckDev11ToolsInstalled>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <CustomBuild>
      <Message                     Condition="'%(CustomBuild.Message)'                    == ''">Performing Custom Build Tools</Message>
      <LinkObjects                 Condition="'%(CustomBuild.LinkObjects)'                == ''">true</LinkObjects>
      <TreatOutputAsContent        Condition="'%(CustomBuild.TreatOutputAsContent)'       == ''">false</TreatOutputAsContent>
      <TrackerLogDirectory         Condition="'%(CustomBuild.TrackerLogDirectory)'        == ''">$(TLogLocation)</TrackerLogDirectory>
      <MinimalRebuildFromTracking  Condition="'%(CustomBuild.MinimalRebuildFromTracking)' == ''">true</MinimalRebuildFromTracking>
      <AcceptableNonZeroExitCodes  Condition="'%(CustomBuild.AcceptableNonZeroExitCodes)' == ''">$(AcceptableNonZeroExitCodes)</AcceptableNonZeroExitCodes>
    </CustomBuild>
    <CustomBuildStep>
      <Message                     Condition="'%(CustomBuildStep.Message)'==''" >Performing Custom Build Step</Message>
    </CustomBuildStep>
    <ProjectReference>
      <LinkLibraryDependencies      Condition="'%(ProjectReference.LinkLibraryDependencies)' == '' and '$(ConfigurationType)' == 'StaticLibrary'">false</LinkLibraryDependencies>
      <LinkLibraryDependencies      Condition="'%(ProjectReference.LinkLibraryDependencies)' == ''">true</LinkLibraryDependencies>
      <UseLibraryDependencyInputs   Condition="'%(ProjectReference.UseLibraryDependencyInputs)' == ''">false</UseLibraryDependencyInputs>
      <ReferenceOutputAssembly      Condition="'%(ProjectReference.ReferenceOutputAssembly)' == ''">true</ReferenceOutputAssembly>
      <!--<Private                      Condition="'%(ProjectReference.Private)' == ''">true</Private>-->
    </ProjectReference>
    <ClCompile>
      <ClangMode>true</ClangMode>
      <WarningLevel>EnableAllWarnings</WarningLevel>
      <DebugInformationFormat Condition="'$(UseDebugLibraries)' == 'true'">FullDebug</DebugInformationFormat>
      <DebugInformationFormat Condition="'$(UseDebugLibraries)' != 'true'">LineNumber</DebugInformationFormat>
      <PreprocessorDefinitions Condition="'$(UseDebugLibraries)' != 'true'">NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <Optimization Condition="'$(UseDebugLibraries)' == 'true'">Disabled</Optimization>
      <Optimization Condition="'$(UseDebugLibraries)' != 'true'">Full</Optimization>
      <StrictAliasing>false</StrictAliasing>
      <ProgramDatabaseFileName>$(IntDir)</ProgramDatabaseFileName>
      <OmitFramePointers Condition="'$(UseDebugLibraries)' == 'true'">false</OmitFramePointers>
      <OmitFramePointers Condition="'$(UseDebugLibraries)' != 'true'">true</OmitFramePointers>
      <ExceptionHandling>Disabled</ExceptionHandling>
      <FunctionLevelLinking Condition="'$(UseDebugLibraries)' == 'true'">false</FunctionLevelLinking>
      <FunctionLevelLinking Condition="'$(UseDebugLibraries)' != 'true'">true</FunctionLevelLinking>
      <DataLevelLinking Condition="'$(UseDebugLibraries)' == 'true'">false</DataLevelLinking>
      <DataLevelLinking Condition="'$(UseDebugLibraries)' != 'true'">true</DataLevelLinking>
      <BufferSecurityCheck>true</BufferSecurityCheck>
      <PositionIndependentCode>true</PositionIndependentCode>
      <UseShortEnums>false</UseShortEnums>
      <RuntimeTypeInfo>false</RuntimeTypeInfo>
      <CLanguageStandard>Default</CLanguageStandard>
      <CppLanguageStandard>Default</CppLanguageStandard>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <ObjectFileName>$(IntDir)%(filename).o</ObjectFileName>
      <CompileAs>Default</CompileAs>
      <TreatWarningAsError>false</TreatWarningAsError>
      <Verbose>false</Verbose>
      <EnablePREfast Condition="'%(ClCompile.EnablePREfast)' == ''">false</EnablePREfast>
      <OmitFramePointers Condition="'%(ClCompile.OmitFramePointers)' == ''">false</OmitFramePointers>
      <MinimalRebuildFromTracking>true</MinimalRebuildFromTracking>
      <PrecompiledHeaderOutputFileDirectory>$(IntDir)</PrecompiledHeaderOutputFileDirectory>
      <PrecompiledHeaderOutputFile></PrecompiledHeaderOutputFile>
      <PrecompiledHeaderCompileAs>CompileAsCpp</PrecompiledHeaderCompileAs>
    </ClCompile>
    <Link>
      <ShowProgress>false</ShowProgress>
      <Version>false</Version>
      <VerboseOutput>false</VerboseOutput>
      <IncrementalLink>false</IncrementalLink>
      <UnresolvedSymbolReferences>true</UnresolvedSymbolReferences>
      <OptimizeForMemory>false</OptimizeForMemory>
      <DebuggerSymbolInformation>true</DebuggerSymbolInformation>
      <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
      <Soname>$(TargetName)$(TargetExt)</Soname>
      <MinimalRebuildFromTracking>true</MinimalRebuildFromTracking>
      <Relocation>true</Relocation>
      <FunctionBinding>true</FunctionBinding>
      <NoExecStackRequired>true</NoExecStackRequired>
      <WholeArchiveBegin>false</WholeArchiveBegin>
      <LibraryDependencies>log;android</LibraryDependencies>
      <LinkDLL Condition="'$(ConfigurationType)' == 'DynamicLibrary'">true</LinkDLL>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories);$(Sysroot)\usr\lib</AdditionalLibraryDirectories>
      <SharedLibrarySearchPath>%(SharedLibrarySearchPath);$(Sysroot)\usr\lib</SharedLibrarySearchPath>
    </Link>
    <Lib>
      <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
      <Command>Replacement</Command>
      <CreateIndex>true</CreateIndex>
      <MinimalRebuildFromTracking>true</MinimalRebuildFromTracking>
    </Lib>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <StripOptions>--strip-unneeded $(StripOptions)</StripOptions>
    <PackageDebugSymbols>false</PackageDebugSymbols>
  </PropertyGroup>
  
  <PropertyGroup>
    <!--  Initial Debugger page and debugger -->
    <DebuggerFlavor>AndroidDebugger</DebuggerFlavor>
    <DebuggerType>NativeOnly</DebuggerType>
    
    <!-- Disables the default tools as they are not relavent to android in the Property Pages -->
    <UseDefaultProjectTools>false</UseDefaultProjectTools>

    <!-- Hide default General Page to show our own -->
    <UseDefaultGeneralPropertyPageSchema>false</UseDefaultGeneralPropertyPageSchema>

    <GetResolvedLinkLibs_Order Condition="'$(GetResolvedLinkLibs_Order)' == ''">BreadthFirst</GetResolvedLinkLibs_Order>
    
    <!-- Guid use to define the group of items to show in the Add Item Dialog. -->
    <AddItemTemplateGuid Condition="'$(AddItemTemplateGuid)' == ''">{F8BBB05E-FBD0-4B36-8C17-0B3F79AD4F01}</AddItemTemplateGuid>
  </PropertyGroup>

  <ImportGroup Label="PropertySheets">
    <Import Condition="'$(UseOfSTL)' != ''" Project="$(MSBuildThisFileDirectory)Android.STL.props" />
  </ImportGroup>

  <PropertyGroup>
    <!-- include path for makefile project, this helper adds at the most common includes. Needs to be after Android.STL.props. -->
    <NMakeIncludeSearchPath>$(NMakeIncludeSearchPath);$(Sysroot)\usr\include;$(VS_NDKRoot)\sources\android\ndk_helper;$(VS_NDKRoot)\sources\android\cpufeatures;$(VS_NDKRoot)\sources\android\native_app_glue;$(StlIncludeDirectories)</NMakeIncludeSearchPath>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)ImportAfter\*.props" Condition="Exists('$(MSBuildThisFileDirectory)ImportAfter')" />
</Project>
